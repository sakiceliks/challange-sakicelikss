{"ast":null,"code":"var _jsxFileName = \"/project/sandbox/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport AstonMartin from \"../assets/aston-martin.jpg\";\nconst brands = [{\n  id: 1,\n  name: \"BMW\"\n}, {\n  id: 2,\n  name: \"Mercedes\"\n}, {\n  id: 3,\n  name: \"Audi\"\n}];\nconst types = [{\n  id: 1,\n  name: \"Sedan\"\n}, {\n  id: 2,\n  name: \"SUV\"\n}, {\n  id: 3,\n  name: \"Coupe\"\n}];\n\nfunction App() {\n  const {\n    0: selectedBrand,\n    1: setSelectedBrand\n  } = useState(null);\n  const {\n    0: selectedType,\n    1: setSelectedType\n  } = useState(null);\n  const {\n    0: match,\n    1: setMatch\n  } = useState(null);\n  const {\n    0: shuffledBrands,\n    1: setShuffledBrands\n  } = useState(brands);\n  const {\n    0: shuffledTypes,\n    1: setShuffledTypes\n  } = useState(types);\n  useEffect(() => {\n    setShuffledBrands(shuffleArray([...brands]));\n    setShuffledTypes(shuffleArray([...types]));\n  }, []);\n\n  const shuffleArray = array => {\n    let currentIndex = array.length,\n        temporaryValue,\n        randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  };\n\n  const handleBrandClick = brand => {\n    setSelectedBrand(brand);\n    setMatch(null);\n  };\n\n  const handleTypeClick = type => {\n    setSelectedType(type);\n\n    if (selectedBrand) {\n      setMatch(selectedBrand.id === type.id);\n    }\n  };\n\n  const brandButtonClasses = brand => `${selectedBrand === brand && match !== null ? match ? \"bg-green-500\" : \"bg-red-500\" : \"bg-white\"} ${selectedBrand === brand && match === null ? \"border-2 border-blue-500\" : \"\"}`;\n\n  const typeButtonClasses = type => `${selectedType === type && match !== null ? match ? \"bg-green-500\" : \"bg-red-500\" : \"bg-white\"} ${selectedType === type && match === null ? \"border-2 border-blue-500\" : \"\"}`;\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, \"Brands\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, shuffledBrands.map(brand => __jsx(\"button\", {\n    key: brand.id,\n    onClick: () => handleBrandClick(brand),\n    className: brandButtonClasses(brand),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, brand.name))), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, \"Types\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, shuffledTypes.map(type => __jsx(\"button\", {\n    key: type.id,\n    onClick: () => handleTypeClick(type),\n    className: typeButtonClasses(type),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, type.name))));\n}\n\nexport default App;","map":{"version":3,"sources":["/project/sandbox/pages/index.js"],"names":["React","useState","useEffect","AstonMartin","brands","id","name","types","App","selectedBrand","setSelectedBrand","selectedType","setSelectedType","match","setMatch","shuffledBrands","setShuffledBrands","shuffledTypes","setShuffledTypes","shuffleArray","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","handleBrandClick","brand","handleTypeClick","type","brandButtonClasses","typeButtonClasses","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport AstonMartin from \"../assets/aston-martin.jpg\";\n\nconst brands = [\n  { id: 1, name: \"BMW\" },\n  { id: 2, name: \"Mercedes\" },\n  { id: 3, name: \"Audi\" },\n];\nconst types = [\n  { id: 1, name: \"Sedan\" },\n  { id: 2, name: \"SUV\" },\n  { id: 3, name: \"Coupe\" },\n];\n\nfunction App() {\n  const [selectedBrand, setSelectedBrand] = useState(null);\n  const [selectedType, setSelectedType] = useState(null);\n  const [match, setMatch] = useState(null);\n  const [shuffledBrands, setShuffledBrands] = useState(brands);\n  const [shuffledTypes, setShuffledTypes] = useState(types);\n\n  useEffect(() => {\n    setShuffledBrands(shuffleArray([...brands]));\n    setShuffledTypes(shuffleArray([...types]));\n  }, []);\n\n  const shuffleArray = (array) => {\n    let currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  };\n\n  const handleBrandClick = (brand) => {\n    setSelectedBrand(brand);\n    setMatch(null);\n  };\n\n  const handleTypeClick = (type) => {\n    setSelectedType(type);\n    if (selectedBrand) {\n      setMatch(selectedBrand.id === type.id);\n    }\n  };\n\n  const brandButtonClasses = (brand) =>\n    `${\n      selectedBrand === brand && match !== null\n        ? match\n          ? \"bg-green-500\"\n          : \"bg-red-500\"\n        : \"bg-white\"\n    } ${\n      selectedBrand === brand && match === null\n        ? \"border-2 border-blue-500\"\n        : \"\"\n    }`;\n\n  const typeButtonClasses = (type) =>\n    `${\n      selectedType === type && match !== null\n        ? match\n          ? \"bg-green-500\"\n          : \"bg-red-500\"\n        : \"bg-white\"\n    } ${\n      selectedType === type && match === null ? \"border-2 border-blue-500\" : \"\"\n    }`;\n\n  return (\n    <div>\n      <h2>Brands</h2>\n      <div>\n        {shuffledBrands.map((brand) => (\n          <button\n            key={brand.id}\n            onClick={() => handleBrandClick(brand)}\n            className={brandButtonClasses(brand)}\n          >\n            {brand.name}\n          </button>\n        ))}\n      </div>\n      <h2>Types</h2>\n      <div>\n        {shuffledTypes.map((type) => (\n          <button\n            key={type.id}\n            onClick={() => handleTypeClick(type)}\n            className={typeButtonClasses(type)}\n          >\n            {type.name}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}