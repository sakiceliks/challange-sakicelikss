{"ast":null,"code":"var _jsxFileName = \"/project/sandbox/pages/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nvar brands = [{\n  id: 1,\n  name: \"BMW\"\n}, {\n  id: 2,\n  name: \"Mercedes\"\n}, {\n  id: 3,\n  name: \"Audi\"\n}];\nvar types = [{\n  id: 1,\n  name: \"Sedan\"\n}, {\n  id: 2,\n  name: \"SUV\"\n}, {\n  id: 3,\n  name: \"Coupe\"\n}];\n\nfunction App() {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(null),\n      selectedBrand = _useState[0],\n      setSelectedBrand = _useState[1];\n\n  var _useState2 = useState(null),\n      selectedType = _useState2[0],\n      setSelectedType = _useState2[1];\n\n  var _useState3 = useState(null),\n      match = _useState3[0],\n      setMatch = _useState3[1];\n\n  var _useState4 = useState(brands),\n      shuffledBrands = _useState4[0],\n      setShuffledBrands = _useState4[1];\n\n  var _useState5 = useState(types),\n      shuffledTypes = _useState5[0],\n      setShuffledTypes = _useState5[1];\n\n  useEffect(function () {\n    setShuffledBrands(shuffleArray([].concat(brands)));\n    setShuffledTypes(shuffleArray([].concat(types)));\n  }, []);\n\n  var shuffleArray = function shuffleArray(array) {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  };\n\n  var handleBrandClick = function handleBrandClick(brand) {\n    setSelectedBrand(brand);\n    setMatch(null);\n  };\n\n  var handleTypeClick = function handleTypeClick(type) {\n    setSelectedType(type);\n\n    if (selectedBrand) {\n      setMatch(selectedBrand.id === type.id);\n    }\n  };\n\n  var brandButtonClasses = function brandButtonClasses(brand) {\n    return \"\".concat(selectedBrand === brand && match !== null ? match ? \"bg-green-500\" : \"bg-red-500\" : \"bg-white\", \" \").concat(selectedBrand === brand && match === null ? \"border-2 border-blue-500\" : \"\");\n  };\n\n  var typeButtonClasses = function typeButtonClasses(type) {\n    return \"\".concat(selectedType === type && match !== null ? match ? \"bg-green-500\" : \"bg-red-500\" : \"bg-white\", \" \").concat(selectedType === type && match === null ? \"border-2 border-blue-500\" : \"\");\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, \"Brands\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, shuffledBrands.map(function (brand) {\n    return __jsx(\"button\", {\n      key: brand.id,\n      onClick: function onClick() {\n        return handleBrandClick(brand);\n      },\n      className: brandButtonClasses(brand),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }, brand.name);\n  })), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, \"Types\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, shuffledTypes.map(function (type) {\n    return __jsx(\"button\", {\n      key: type.id,\n      onClick: function onClick() {\n        return handleTypeClick(type);\n      },\n      className: typeButtonClasses(type),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, type.name);\n  })));\n}\n\n_s(App, \"fK1W8h51tTpnqWufAnaf4EsVatU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/project/sandbox/pages/index.js"],"names":["React","useState","useEffect","brands","id","name","types","App","selectedBrand","setSelectedBrand","selectedType","setSelectedType","match","setMatch","shuffledBrands","setShuffledBrands","shuffledTypes","setShuffledTypes","shuffleArray","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","handleBrandClick","brand","handleTypeClick","type","brandButtonClasses","typeButtonClasses","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst brands = [\n  { id: 1, name: \"BMW\" },\n  { id: 2, name: \"Mercedes\" },\n  { id: 3, name: \"Audi\" },\n];\nconst types = [\n  { id: 1, name: \"Sedan\" },\n  { id: 2, name: \"SUV\" },\n  { id: 3, name: \"Coupe\" },\n];\n\nfunction App() {\n  const [selectedBrand, setSelectedBrand] = useState(null);\n  const [selectedType, setSelectedType] = useState(null);\n  const [match, setMatch] = useState(null);\n  const [shuffledBrands, setShuffledBrands] = useState(brands);\n  const [shuffledTypes, setShuffledTypes] = useState(types);\n\n  useEffect(() => {\n    setShuffledBrands(shuffleArray([...brands]));\n    setShuffledTypes(shuffleArray([...types]));\n  }, []);\n\n  const shuffleArray = (array) => {\n    let currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  };\n\n  const handleBrandClick = (brand) => {\n    setSelectedBrand(brand);\n    setMatch(null);\n  };\n\n  const handleTypeClick = (type) => {\n    setSelectedType(type);\n    if (selectedBrand) {\n      setMatch(selectedBrand.id === type.id);\n    }\n  };\n\n  const brandButtonClasses = (brand) =>\n    `${\n      selectedBrand === brand && match !== null\n        ? match\n          ? \"bg-green-500\"\n          : \"bg-red-500\"\n        : \"bg-white\"\n    } ${\n      selectedBrand === brand && match === null\n        ? \"border-2 border-blue-500\"\n        : \"\"\n    }`;\n\n  const typeButtonClasses = (type) =>\n    `${\n      selectedType === type && match !== null\n        ? match\n          ? \"bg-green-500\"\n          : \"bg-red-500\"\n        : \"bg-white\"\n    } ${\n      selectedType === type && match === null ? \"border-2 border-blue-500\" : \"\"\n    }`;\n\n  return (\n    <div>\n      <h2>Brands</h2>\n      <div>\n        {shuffledBrands.map((brand) => (\n          <button\n            key={brand.id}\n            onClick={() => handleBrandClick(brand)}\n            className={brandButtonClasses(brand)}\n          >\n            {brand.name}\n          </button>\n        ))}\n      </div>\n      <h2>Types</h2>\n      <div>\n        {shuffledTypes.map((type) => (\n          <button\n            key={type.id}\n            onClick={() => handleTypeClick(type)}\n            className={typeButtonClasses(type)}\n          >\n            {type.name}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}